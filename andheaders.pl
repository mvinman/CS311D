#!/usr/bin/perl

# THIS SCRIPT IS PROVIDED AS IS.  THIS SCRIPT CREATES FILES IN YOUR
# FILE SYSTEM AND MAY OVERWRITE EXISTING FILES.  BE VERY CAREFUL!
# THE DEVELOPER IS NOT RESPONSIBLE FOR ANY UNINTENDED CONSEQUENCES
# SUCH AS MAY RESULT FROM THE USE OF THE SCRIPT.

# Adds headers to Android files

# Copies *.java and *.xml files from a source tree to a user-supplied
# destination directory and adds user-defined headers which meet the
# basic guidelines for homework submitted to Dr. Abbas Moghtanei.

# This script does not check to see whether the files being copied
# already exist in the destination directory. Therefore, if any file
# in the destination directory has the same name as a file being
# copied it will be overwritten.

# Note that the headers for some files may also have "Activity" and/or
# "Objective" lines.  Those that are predictable are auto-generated by
# the script, but those which are not, like the .java files created by
# the user, are left blank.  The user should fill them in as necessary.

#                USER-MODIFIABLE VARIABLES
#
$author = "YOUR NAME";
$date = "09/17/2014";
$class = "CS311D";
$assignment_number = "2";
#
# SET $root TO THE PATH WHERE YOU KEEP YOUR WORKSPACE FOLDERS.
# IT WILL BE PRE-PENDED TO THE PROJECT NAME AS THE PATH WHERE
# THE .java AND .xml FILES ARE LOCATED.
$root = "developer/workspace";
#
# SET $project TO THE NAME OF YOUR PROJECT
$project = "OrientationDemo";
#
# SET $destdir TO THE PATH WHERE YOU WANT TO COPY THE MODIFIED
# FILES TO.
# NOTE: ON MY WINDOWS 7 INSTALLATION, NEEDS THE FULLY QUALIFIED
# PATH NAME. EXAMPLE:
# $destdir = "/cygdrive/c/cygwin/home/<username>/CS311D/Homework #2";
$destdir = "";
#
# THESE ARE STRINGS FOR THE "Objective" FIELD.  YOU CAN LEAVE
# THEM AS IS OR CHANGE THEM TO SOMETHING YOU PREFER.
# FOR AndroidManifest.xml:
$obj_man = "This is the manifest file";
#
# FOR strings.xml
$obj_str = "This xml file defines string resources.";
#
# FOR dimens.xml
$obj_dim = "This xml file defines dimension resources.";
#
# FOR colors.xml
$obj_col = "This xml file defines color resources.";
#
# FOR launcher activity .xml
$obj_launch = "This xml file defines the layout and views of the Launcher Activity.";
#
# FOR styles.xml
$obj_sty = "This xml file defines style resources.";
#
# MODIFY VARIABLES BELOW THIS LINE AT YOUR OWN RISK!

use File::Find;
use File::Copy;

$sourcedir = $root . "/" . $project;

$author_tag = "Author: ";
$date_tag = "Date: ";
$class_tag = "Class: ";
$aproj = "Android Project Name: $project\n";
$filename_tag = "File Name: ";
$act_tag = "Activity Type: ";
$assign_num_tag = "Assignment: Homework #";
$obj_tag = "Objective: ";
$xmlhdr_begin = "<!--\n";
$xmlhdr_end = "-->\n";
$javahdr_begin = "/*\n";
$javahdr_end = "*/\n";

$author = $author_tag . $author . "\n";
$date = $date_tag . $date . "\n";
$class = $class_tag . $class . "\n";
$assign_num = $assign_num_tag . $assignment_number . "\n";

# BEFORE WE DO ANYTHING, CONFIRM THE DESTINATION DIRECTORY

if ($destdir eq "") {
    die "You must assign a destination directory to the variable \$destdir in the script file.\n";
}

print "The destination directory is currently: $destdir\n";
print "Do you want to keep it? [yn] ";
$confirm = <>;
if ($confirm =~ /^y/) {
    print "OK, continuing the script.\n";
}
else {
    print "Go back and edit the script file to assign a destination directory to the variable \$destdir.\n";
    exit;
}

# WE HAVE A DESTINATION DIRECTORY, NOW GENERATE THE HEADERS

find( sub{
    return if $_ !~ /\.((xml)|(java))$/; # get only .java and .xml files
    return if $_ =~ /BuildConfig.java/; # we don't need BuildConfig.java
    copy($_, $destdir);
      }, $sourcedir);

find( sub{
    return if $_ eq "."; # the File::Find module returns '.'  Ignore it.
    $file = $_;
    open FILE, $file;
    @lines = <FILE>;
    close FILE;
    # dynamically create the "Objective" fields for various stock
    # file types
    if ($file eq "AndroidManifest.xml") {
	$obj = $obj_tag . $obj_man;
    } elsif ($file eq "strings.xml") {
	$obj = $obj_tag . $obj_str;
    } elsif ($file eq "dimens.xml") {
	$obj = $obj_tag . $obj_dim;
    } elsif ($file eq "colors.xml") {
	$obj = $obj_tag . $obj_col;
    } elsif ($file eq "styles.xml") {
	$obj = $obj_tag . $obj_sty;
    } elsif ($file =~ /activity.*xml/) {
	# dynamically create the "Objective" field for the launcher
	# activity, assuming the name of the file follows the pattern
	#    activity_<project_name>.xml
	$tmpname = $file;
	$tmpname =~ s/activity_(.*)\.xml/$1/;
	$tmpname =~ s/_//g; # strip out any underscores
	if ($tmpname =~ /^$project$/i) {
	    $obj = $obj_tag . $obj_launch;
	}
    } else {
	$obj = $obj_tag;
    }
    $fname = $filename_tag . $file . "\n";
    #
    # DEFINE THE HEADERS FOR VARIOUS FILE TYPES
    #
    #     Some files have a line at the beginning that the header
    #     must follow.
    if ($lines[0] =~ /<\?xml version="1\.0" encoding="utf-8"\?>/) {
	$firstline = shift @lines;
	@xmlhdr = ($xmlhdr_begin, $author, $date, $class,
		   $aproj, $fname, $assign_num, "$obj\n", $xmlhdr_end, "\n");
	unshift @xmlhdr, $firstline;
	unshift @lines, @xmlhdr;
    }
    #    For all other .xml files
    elsif ($file =~ /\.xml$/) {
	@xmlhdr = ($xmlhdr_begin, $author, $date, $class,
		   $aproj, $fname, $assign_num, "$obj\n", $xmlhdr_end, "\n");
	unshift @lines, @xmlhdr;
    }
    #    For all other files, which in this case should be only .java files.
    else {
	@javahdr = ($javahdr_begin, $author, $date, $class,
		    $aproj, $fname, "$act_tag\n", 
		    $assign_num, "$obj\n", $javahdr_end, "\n");
	unshift @lines, @javahdr;
    }
    # WRITE THE MODIFIED FILES TO THE DESTINATION DIRECTORY
    open FILE, ">$file";
    foreach $line (@lines) {
	# On some platforms an extra control-M appears at the end
	# of the line in some files.  This next line removes it.
	$line =~ s/\cM//g;
	print FILE $line;
    }
    close FILE;
    $fname = "";
      }, $destdir);

print "Script completed.\n";

# END OF FILE
